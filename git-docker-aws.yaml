name: Deploy to Amazon ECS with Dual Containers

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: MY_AWS_REGION
  ECR_REPOSITORY: MY_ECR_REPOSITORY
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Web App
    - name: Build, tag, and push image to Amazon ECR for Web App
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ProjectManagement.API
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:webapp-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:webapp-$IMAGE_TAG
        echo "image_webapp=$ECR_REGISTRY/$ECR_REPOSITORY:webapp-$IMAGE_TAG" >> $GITHUB_ENV

    # Worker
    - name: Build, tag, and push image to Amazon ECR for Worker
      id: build-image-worker
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ProjectManagement.Worker
        docker build -f Dockerfile.worker -t $ECR_REGISTRY/$ECR_REPOSITORY:worker-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:worker-$IMAGE_TAG
        echo "image_worker=$ECR_REGISTRY/$ECR_REPOSITORY:worker-$IMAGE_TAG" >> $GITHUB_ENV

    # Update Task Definition
    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: webapp # Assuming this is the name in your task definition
        image: ${{ env.image_webapp }}
    - name: Update Task Definition for Worker
      id: task-def-worker
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }} # Note: We're updating the task def from previous step
        container-name: worker # Assuming this is the name in your task definition
        image: ${{ env.image_worker }}

    # Deploy
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-worker.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
